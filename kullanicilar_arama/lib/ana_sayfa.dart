import 'package:dio/dio.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:grock/grock.dart';

void main() => runApp(ana_sayfa());


class ana_sayfa extends StatefulWidget {
  const ana_sayfa({Key? key}) : super(key: key);

  @override
  State<ana_sayfa> createState() => _ana_sayfaState();
}

class _ana_sayfaState extends State<ana_sayfa> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Kullanıcı arama uygulaması',
      home: Home(),
      navigatorKey: Grock.navigationKey,
      scaffoldMessengerKey: Grock.scaffoldMessengerKey,
    );
  }
}

class Home extends StatefulWidget {
  const Home({Key? key}) : super(key: key);

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {

  bool isLoading = false;
  final dio = Dio();
  late FocusNode _focusNode;


  TextEditingController search_controller = TextEditingController();
  bool isSearching = false;

  List<PeopleModelData?> peopleList = [];
  List<PeopleModelData?> searhList = [];


  void arama_fon (String value)
  {
    for (var people in peopleList)
    {
      if (people!.firstName!.toLowerCase().trim().contains(search_controller.text.toLowerCase().trim()))
      {
        searhList.add(people);
        setState(() {

        });
      }
    }
  }


  Future<PeopleModel> getData() async {
    setState(() {
      isLoading = true;
    });
    final response = await dio.get('https://reqres.in/api/users?page=2');
    return PeopleModel.fromJson(response.data);
  }

  @override
  void initState() {
    super.initState();
    _focusNode = FocusNode();
    getData().then((value) => setState(()
    {
      peopleList = value.data!;
      isLoading = false;
    }));
  }




  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CupertinoNavigationBar(
        middle: app_bar_title(),
        trailing: arama_ikonu_widgeti(),
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator.adaptive())
          : GrockList(
        itemCount: searhList.isNotEmpty ? searhList.length : peopleList.length,
        itemBuilder: (context,index)
        {
          var item = searhList.isNotEmpty
              ? searhList[index]!
              : peopleList[index]!;
          return Card(
            child: ListTile(
              title: Text("${item.firstName} ${item.lastName}",),
              subtitle: Text("${item.email}",
              ),
              leading: CircleAvatar(
                backgroundImage: NetworkImage(item.avatar!),
              ),
            ),
          );
        }
      ),
    );
  }

  Widget app_bar_title() {
    if (isSearching) {
      return CupertinoTextField(
        controller: search_controller,
        focusNode: _focusNode,
        textInputAction: TextInputAction.search,
        placeholder: 'Ara',
        onSubmitted: (value) {
          arama_fon(value);
        },
      );
    } else {
      return const Text('Ana Sayfa');
    }
  }

  Widget arama_ikonu_widgeti() {
    if (isSearching) {
      return GrockContainer(
        padding: 10.onlyLeftP,
        child: const Icon(CupertinoIcons.clear, size: 24),
        onTap: () {
          setState(() {
            _focusNode.unfocus();
            isSearching = false;
            searhList.clear();
          });
        },
      );
    } else {
      return GrockContainer(
        padding: 10.onlyLeftP,
        child: const Icon(CupertinoIcons.search, size: 24),
        onTap: () {
          setState(() {
            _focusNode.requestFocus();
            isSearching = true;
          });
        },
      );
    }
  }
}



// MODEL
///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class PeopleModelSupport {
  String? url;
  String? text;

  PeopleModelSupport({
    this.url,
    this.text,
  });
  PeopleModelSupport.fromJson(Map<String, dynamic> json) {
    url = json['url']?.toString();
    text = json['text']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['url'] = url;
    data['text'] = text;
    return data;
  }
}

class PeopleModelData {
  int? id;
  String? email;
  String? firstName;
  String? lastName;
  String? avatar;

  PeopleModelData({
    this.id,
    this.email,
    this.firstName,
    this.lastName,
    this.avatar,
  });
  PeopleModelData.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    email = json['email']?.toString();
    firstName = json['first_name']?.toString();
    lastName = json['last_name']?.toString();
    avatar = json['avatar']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['email'] = email;
    data['first_name'] = firstName;
    data['last_name'] = lastName;
    data['avatar'] = avatar;
    return data;
  }
}

class PeopleModel {
  int? page;
  int? perPage;
  int? total;
  int? totalPages;
  List<PeopleModelData?>? data;
  PeopleModelSupport? support;

  PeopleModel({
    this.page,
    this.perPage,
    this.total,
    this.totalPages,
    this.data,
    this.support,
  });
  PeopleModel.fromJson(Map<String, dynamic> json) {
    page = json['page']?.toInt();
    perPage = json['per_page']?.toInt();
    total = json['total']?.toInt();
    totalPages = json['total_pages']?.toInt();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <PeopleModelData>[];
      v.forEach((v) {
        arr0.add(PeopleModelData.fromJson(v));
      });
      data = arr0;
    }
    support = (json['support'] != null)
        ? PeopleModelSupport.fromJson(json['support'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['page'] = page;
    data['per_page'] = perPage;
    data['total'] = total;
    data['total_pages'] = totalPages;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['data'] = arr0;
    }
    if (support != null) {
      data['support'] = support!.toJson();
    }
    return data;
  }
}
